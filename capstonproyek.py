# -*- coding: utf-8 -*-
"""capstonProyek.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XH_r-tF6crlJDdj-90BIhsDJZpDpjgbS
"""

from google.colab import drive
drive.mount('/content/gdrive')

!unzip '/content/gdrive/MyDrive/datasetjadi.zip' -d '/content/gdrive/MyDrive/Data'

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import tensorflow as tf
import pathlib
import shutil
import os
import glob
from tensorflow import keras
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications import ResNet152V2

# %matplotlib inline

!pip install split_folders tqdm

import splitfolders

splitfolders.ratio('/content/gdrive/MyDrive/Data', output='/content/gdrive/MyDrive/Data/data_model', seed=3, ratio=(.6, .4))

#Direktori Utama
base_dir = '/content/gdrive/MyDrive/Data/data_model'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')
#Direktori Train
train_monkeypox_dir = os.path.join(train_dir, 'monkeypox')
train_smallpox_dir = os.path.join(train_dir, 'smallpox')
train_others_dir = os.path.join(train_dir, 'Others')
#Direktori Validasi
val_monkeypox_dir = os.path.join(validation_dir, 'monkeypox')
val_smallpox_dir = os.path.join(validation_dir, 'smallpox')
val_others_dir = os.path.join(validation_dir, 'Others')

datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=40,
                    width_shift_range=0.2,
                    height_shift_range=0.2,
                    zoom_range=0.2,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = datagen.flow_from_directory(
        train_dir,  # direktori data latih
        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=20,
        class_mode='categorical')
 
validation_generator = datagen.flow_from_directory(
        validation_dir, # direktori data validasi
        target_size=(150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=20, 
        class_mode='categorical')

model = tf.keras.models.Sequential([
    ResNet152V2(weights="imagenet", include_top=False, input_tensor=Input(shape=(150, 150, 3))),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(), 
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  
])
model.layers[0].trainable = False

model.summary()

model.compile(optimizer=tf.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(train_generator,
                              validation_data=validation_generator,
                              epochs=50,
                              verbose=2)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

model.save('model.h5')

!zip -r '/content//model.zip' '/content//model.h5'

!pip install streamlit -q

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import tensorflow as tf
# 
# 
# bg_img = """
# 
# <style>
# 
# [data-testid="stAppViewContainer"] > .main{
#         background-image: url("https://www.srikotamedical.com/wp-content/uploads/2021/08/Ct-Scan-2.jpg");
#         background-size: 1600px 750px;
# }
# #MainMenu{visibility: hidden;}
# footer{visibility: hidden;}
# header{visibility: hidden;}
# 
# div.css-zt5igj.e16nr0p33{
#         background-size: 100% ;
#         top: 0px;
#         height: 75px;
#         position: fixed;
#         background: rgba(209, 209, 209, 0.42);
#         font-family: 'Inter';
#         font-style: normal;
#         font-weight: 700;
#         font-size: 40px;
#         line-height: 48px;
#         text-align: center;
#         color: black;
# }
# 
# 
# 
# </style>
# 
# """
# st.header('Prediksi Cacar Monyet dan Cacar Biasa')
# st.markdown(bg_img, unsafe_allow_html=True)
# 
# st.set_option('deprecation.showfileUploaderEncoding',False)
# @st.cache(allow_output_mutation=True)
# def load_model():
#   model = tf.keras.models.load_model('/content/model.h5')
#   return model
# model = load_model()
# 
# 
# 
# file = st.file_uploader("masukkan gambar",type=["jpg","png"])
# import cv2
# from PIL import Image, ImageOps
# import numpy as np
# def import_and_predict(image_data, model):
# 
#         size = (150,150)
#         image = ImageOps.fit(image_data, size, Image.ANTIALIAS)
#         img = np.asarray(image)
#         img_reshape = img[np.newaxis,...]
#         prediction = model.predict(img_reshape)
# 
#         return prediction
# 
# if file is None:
#     st.text("tolong masukkan gambar")
# else:
#     image = Image.open(file)
#     st.image(image, use_column_width=True)
#     predictions = import_and_predict(image, model)
#     class_names = ['monkeypox', 'Others', 'smallpox']
#     string = "tergolong :" +class_names[np.argmax(predictions)]
#     st.success(string)

!streamlit run app.py & npx localtunnel --port 8501

"""================================================================================================"""